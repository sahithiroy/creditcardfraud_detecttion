# -*- coding: utf-8 -*-
"""Creditcard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1evOuJZgsNVqU4ECpYdNbBgB_H7D2NUOU
"""

print("######################################")
print("       Import Key Packages            ")
print("######################################")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display
import statsmodels as sm
from sklearn.metrics import accuracy_score
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor
from sklearn.metrics import r2_score,mean_squared_error
from sklearn import preprocessing

dataset=pd.read_csv("/content/creditcard.csv")

dataset.head()

dataset.info()

dataset.isnull().sum()

zero_not_accepted=['V11','V12','V13','V14','V15','V16','V17','V18','V19','V20','V21','V22','V23','V24','V25','V26','V27','V28','Amount','Class']
for column in zero_not_accepted:
  dataset[column]=dataset[column].replace(0,np.NaN)
  mean=int(dataset[column].mean(skipna=True))
  dataset[column]=dataset[column].replace(np.NaN,mean)

dataset.isnull().sum()

#distribution of legit transactions & fradulent transcations
dataset['Class'].value_counts()

legit=dataset[dataset.Class==0]
fraud=dataset[dataset.Class==1]

print(legit.shape)
print(fraud.shape)

legit.Amount.describe()

fraud.Amount.describe()

#compare the values for both transactions
dataset.groupby('Class').mean()

legit_sample=legit.sample(n=232)

new_dataset=pd.concat((legit_sample,fraud),axis=0)

new_dataset.head()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

X=new_dataset.drop(columns='Class',axis=1)
Y=new_dataset['Class']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

model=LogisticRegression()

#training the logistic REgression model with Ttraining Data
model.fit(X_train,Y_train)

X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy on training_data",training_data_accuracy)

#Accuracy on test_data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy on testing_data",test_data_accuracy)

